<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.5" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
    <Property name="cursor" type="java.awt.Cursor" editor="org.netbeans.modules.form.editors2.CursorEditor">
      <Color id="Default Cursor"/>
    </Property>
    <Property name="focusCycleRoot" type="boolean" value="false"/>
    <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
      <Font name="LilyUPC" size="10" style="0"/>
    </Property>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="true"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,2,85,0,0,3,-23"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBoxLayout">
    <Property name="axis" type="int" value="3"/>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JPanel" name="panel_right">
      <Properties>
        <Property name="background" type="java.awt.Color" editor="org.netbeans.beaninfo.editors.ColorEditor">
          <Color blue="a0" green="c9" red="fe" type="rgb"/>
        </Property>
      </Properties>

      <Layout>
        <DimensionLayout dim="0">
          <Group type="103" groupAlignment="0" attributes="0">
              <Group type="102" alignment="0" attributes="0">
                  <Component id="lbl_pic" min="-2" max="-2" attributes="0"/>
                  <Group type="103" groupAlignment="0" attributes="0">
                      <Group type="102" alignment="0" attributes="0">
                          <EmptySpace min="-2" pref="75" max="-2" attributes="0"/>
                          <Component id="lbl_title" min="-2" pref="313" max="-2" attributes="0"/>
                      </Group>
                      <Group type="102" alignment="0" attributes="0">
                          <EmptySpace min="-2" pref="107" max="-2" attributes="0"/>
                          <Group type="103" groupAlignment="1" attributes="0">
                              <Component id="btn_Exit" min="-2" pref="251" max="-2" attributes="0"/>
                              <Component id="btn_play" min="-2" pref="251" max="-2" attributes="0"/>
                          </Group>
                      </Group>
                  </Group>
                  <EmptySpace pref="90" max="32767" attributes="0"/>
              </Group>
          </Group>
        </DimensionLayout>
        <DimensionLayout dim="1">
          <Group type="103" groupAlignment="0" attributes="0">
              <Group type="102" attributes="0">
                  <EmptySpace min="-2" pref="141" max="-2" attributes="0"/>
                  <Component id="lbl_title" min="-2" pref="86" max="-2" attributes="0"/>
                  <EmptySpace min="-2" pref="32" max="-2" attributes="0"/>
                  <Component id="btn_play" min="-2" pref="83" max="-2" attributes="0"/>
                  <EmptySpace min="-2" pref="42" max="-2" attributes="0"/>
                  <Component id="btn_Exit" min="-2" pref="83" max="-2" attributes="0"/>
                  <EmptySpace max="32767" attributes="0"/>
              </Group>
              <Group type="102" alignment="1" attributes="0">
                  <Component id="lbl_pic" min="-2" max="-2" attributes="0"/>
                  <EmptySpace min="0" pref="0" max="32767" attributes="0"/>
              </Group>
          </Group>
        </DimensionLayout>
      </Layout>
      <SubComponents>
        <Component class="javax.swing.JLabel" name="lbl_title">
          <Properties>
            <Property name="background" type="java.awt.Color" editor="org.netbeans.beaninfo.editors.ColorEditor">
              <Color blue="a" green="3e" red="82" type="rgb"/>
            </Property>
            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
              <Font name="LilyUPC" size="66" style="1"/>
            </Property>
            <Property name="foreground" type="java.awt.Color" editor="org.netbeans.beaninfo.editors.ColorEditor">
              <Color blue="a" green="3e" red="82" type="rgb"/>
            </Property>
            <Property name="text" type="java.lang.String" value="SNAKE GAME"/>
          </Properties>
        </Component>
        <Component class="javax.swing.JButton" name="btn_play">
          <Properties>
            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
              <Font name="IrisUPC" size="38" style="1"/>
            </Property>
            <Property name="text" type="java.lang.String" value="Play"/>
            <Property name="toolTipText" type="java.lang.String" value=""/>
          </Properties>
          <Events>
            <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="btn_playMouseClicked"/>
            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="btn_playActionPerformed"/>
          </Events>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_AddingCodePost" type="java.lang.String" value="btn_play.setContentAreaFilled(false); // &#xe1b;&#xe34;&#xe14;&#xe1e;&#xe37;&#xe49;&#xe19;&#xe17;&#xe35;&#xe48;&#xe1b;&#xe38;&#xe48;&#xe21;&#xe1b;&#xe01;&#xe15;&#xe34;&#xa;btn_play.setFocusPainted(false); // &#xe1b;&#xe34;&#xe14;&#xe01;&#xe32;&#xe23;&#xe41;&#xe2a;&#xe14;&#xe07;&#xe1c;&#xe25;&#xe42;&#xe1f;&#xe01;&#xe31;&#xe2a;&#xa;btn_play.setBorderPainted(false); // &#xe1b;&#xe34;&#xe14;&#xe01;&#xe32;&#xe23;&#xe41;&#xe2a;&#xe14;&#xe07;&#xe1c;&#xe25;&#xe02;&#xe2d;&#xe1a;&#xa;btn_play.setOpaque(false); // &#xe17;&#xe33;&#xe43;&#xe2b;&#xe49;&#xe1b;&#xe38;&#xe48;&#xe21;&#xe42;&#xe1b;&#xe23;&#xe48;&#xe07;&#xe43;&#xe2a;&#xe40;&#xe1e;&#xe37;&#xe48;&#xe2d;&#xe43;&#xe2b;&#xe49;&#xe01;&#xe32;&#xe23;&#xe27;&#xe32;&#xe14;&#xe40;&#xe07;&#xe32;&#xe17;&#xe33;&#xe07;&#xe32;&#xe19;&#xa;btn_play.setForeground(Color.WHITE); // &#xe2a;&#xe35;&#xe02;&#xe49;&#xe2d;&#xe04;&#xe27;&#xe32;&#xe21;&#xa;btn_play.setFont(new Font(&quot;LilyUPC&quot;, Font.BOLD, 36)); // &#xe15;&#xe31;&#xe49;&#xe07;&#xe1f;&#xe2d;&#xe19;&#xe15;&#xe4c;&#xa;&#xa;// &#xe1b;&#xe23;&#xe31;&#xe1a;&#xe41;&#xe15;&#xe48;&#xe07; UI &#xe2a;&#xe33;&#xe2b;&#xe23;&#xe31;&#xe1a;&#xe01;&#xe32;&#xe23;&#xe27;&#xe32;&#xe14;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;btn_play.setUI(new javax.swing.plaf.basic.BasicButtonUI() {&#xa;    private boolean isHovered = false; // &#xe15;&#xe31;&#xe27;&#xe41;&#xe1b;&#xe23;&#xe2a;&#xe33;&#xe2b;&#xe23;&#xe31;&#xe1a;&#xe15;&#xe23;&#xe27;&#xe08;&#xe08;&#xe31;&#xe1a; Hover&#xa;&#xa;    @Override&#xa;    public void paint(Graphics g, JComponent c) {&#xa;        Graphics2D g2 = (Graphics2D) g.create();&#xa;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#xa;&#xa;        int width = c.getWidth();&#xa;        int height = c.getHeight();&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe40;&#xe07;&#xe32;&#xe14;&#xe49;&#xe32;&#xe19;&#xe2b;&#xe25;&#xe31;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;        g2.setColor(new Color(255, 102, 0, 100)); // &#xe2a;&#xe35;&#xe40;&#xe07;&#xe32; (&#xe2a;&#xe49;&#xe21;&#xe2d;&#xe48;&#xe2d;&#xe19;&#xe42;&#xe1b;&#xe23;&#xe48;&#xe07;&#xe41;&#xe2a;&#xe07;)&#xa;        g2.fillRoundRect(5, 10, width - 10, height - 10, 30, 30);&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe1e;&#xe37;&#xe49;&#xe19;&#xe2b;&#xe25;&#xe31;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21; (&#xe44;&#xe25;&#xe48;&#xe23;&#xe30;&#xe14;&#xe31;&#xe1a;&#xe2a;&#xe35;)&#xa;        GradientPaint gradientPaint = new GradientPaint(&#xa;            0, 0,&#xa;            isHovered ? new Color(255, 204, 0) : new Color(255, 153, 0), // &#xe2a;&#xe35;&#xe40;&#xe21;&#xe37;&#xe48;&#xe2d; Hover &#xe2b;&#xe23;&#xe37;&#xe2d;&#xe1b;&#xe01;&#xe15;&#xe34;&#xa;            0, height,&#xa;            isHovered ? new Color(255, 180, 0) : new Color(255, 102, 0)&#xa;        );&#xa;        g2.setPaint(gradientPaint);&#xa;        g2.fillRoundRect(0, 0, width - 10, height - 10, 30, 30);&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe02;&#xe49;&#xe2d;&#xe04;&#xe27;&#xe32;&#xe21;&#xe02;&#xe2d;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;        super.paint(g, c);&#xa;        g2.dispose();&#xa;    }&#xa;&#xa;    @Override&#xa;    protected void installListeners(final AbstractButton b) {&#xa;        super.installListeners(b);&#xa;&#xa;        // &#xe40;&#xe1e;&#xe34;&#xe48;&#xe21; MouseListener &#xe40;&#xe1e;&#xe37;&#xe48;&#xe2d;&#xe08;&#xe31;&#xe14;&#xe01;&#xe32;&#xe23; Hover Effect&#xa;        b.addMouseListener(new java.awt.event.MouseAdapter() {&#xa;            @Override&#xa;            public void mouseEntered(java.awt.event.MouseEvent e) {&#xa;                isHovered = true;&#xa;                b.repaint();&#xa;            }&#xa;&#xa;            @Override&#xa;            public void mouseExited(java.awt.event.MouseEvent e) {&#xa;                isHovered = false;&#xa;                b.repaint();&#xa;            }&#xa;        });&#xa;    }&#xa;});"/>
          </AuxValues>
        </Component>
        <Component class="javax.swing.JButton" name="btn_Exit">
          <Properties>
            <Property name="font" type="java.awt.Font" editor="org.netbeans.beaninfo.editors.FontEditor">
              <Font name="IrisUPC" size="38" style="1"/>
            </Property>
            <Property name="text" type="java.lang.String" value="Exit"/>
            <Property name="toolTipText" type="java.lang.String" value=""/>
          </Properties>
          <Events>
            <EventHandler event="mouseClicked" listener="java.awt.event.MouseListener" parameters="java.awt.event.MouseEvent" handler="btn_ExitMouseClicked"/>
            <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="btn_ExitActionPerformed"/>
          </Events>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_AddingCodePost" type="java.lang.String" value="btn_Exit.setContentAreaFilled(false); // &#xe1b;&#xe34;&#xe14;&#xe1e;&#xe37;&#xe49;&#xe19;&#xe17;&#xe35;&#xe48;&#xe1b;&#xe38;&#xe48;&#xe21;&#xe1b;&#xe01;&#xe15;&#xe34;&#xa;btn_Exit.setFocusPainted(false); // &#xe1b;&#xe34;&#xe14;&#xe01;&#xe32;&#xe23;&#xe41;&#xe2a;&#xe14;&#xe07;&#xe1c;&#xe25;&#xe42;&#xe1f;&#xe01;&#xe31;&#xe2a;&#xa;btn_Exit.setBorderPainted(false); // &#xe1b;&#xe34;&#xe14;&#xe01;&#xe32;&#xe23;&#xe41;&#xe2a;&#xe14;&#xe07;&#xe1c;&#xe25;&#xe02;&#xe2d;&#xe1a;&#xa;btn_Exit.setOpaque(false); // &#xe17;&#xe33;&#xe43;&#xe2b;&#xe49;&#xe1b;&#xe38;&#xe48;&#xe21;&#xe42;&#xe1b;&#xe23;&#xe48;&#xe07;&#xe43;&#xe2a;&#xe40;&#xe1e;&#xe37;&#xe48;&#xe2d;&#xe43;&#xe2b;&#xe49;&#xe01;&#xe32;&#xe23;&#xe27;&#xe32;&#xe14;&#xe40;&#xe07;&#xe32;&#xe17;&#xe33;&#xe07;&#xe32;&#xe19;&#xa;btn_Exit.setForeground(Color.WHITE); // &#xe2a;&#xe35;&#xe02;&#xe49;&#xe2d;&#xe04;&#xe27;&#xe32;&#xe21;&#xa;btn_Exit.setFont(new Font(&quot;LilyUPC&quot;, Font.BOLD, 36)); // &#xe15;&#xe31;&#xe49;&#xe07;&#xe1f;&#xe2d;&#xe19;&#xe15;&#xe4c;&#xa;&#xa;// &#xe1b;&#xe23;&#xe31;&#xe1a;&#xe41;&#xe15;&#xe48;&#xe07; UI &#xe2a;&#xe33;&#xe2b;&#xe23;&#xe31;&#xe1a;&#xe01;&#xe32;&#xe23;&#xe27;&#xe32;&#xe14;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;btn_Exit.setUI(new javax.swing.plaf.basic.BasicButtonUI() {&#xa;    private boolean isHovered = false; // &#xe15;&#xe31;&#xe27;&#xe41;&#xe1b;&#xe23;&#xe2a;&#xe33;&#xe2b;&#xe23;&#xe31;&#xe1a;&#xe15;&#xe23;&#xe27;&#xe08;&#xe08;&#xe31;&#xe1a; Hover&#xa;&#xa;    @Override&#xa;    public void paint(Graphics g, JComponent c) {&#xa;        Graphics2D g2 = (Graphics2D) g.create();&#xa;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#xa;&#xa;        int width = c.getWidth();&#xa;        int height = c.getHeight();&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe40;&#xe07;&#xe32;&#xe14;&#xe49;&#xe32;&#xe19;&#xe2b;&#xe25;&#xe31;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;        g2.setColor(new Color(255, 102, 0, 100)); // &#xe2a;&#xe35;&#xe40;&#xe07;&#xe32; (&#xe2a;&#xe49;&#xe21;&#xe2d;&#xe48;&#xe2d;&#xe19;&#xe42;&#xe1b;&#xe23;&#xe48;&#xe07;&#xe41;&#xe2a;&#xe07;)&#xa;        g2.fillRoundRect(5, 10, width - 10, height - 10, 30, 30);&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe1e;&#xe37;&#xe49;&#xe19;&#xe2b;&#xe25;&#xe31;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21; (&#xe44;&#xe25;&#xe48;&#xe23;&#xe30;&#xe14;&#xe31;&#xe1a;&#xe2a;&#xe35;)&#xa;        GradientPaint gradientPaint = new GradientPaint(&#xa;            0, 0,&#xa;            isHovered ? new Color(255, 204, 0) : new Color(255, 153, 0), // &#xe2a;&#xe35;&#xe40;&#xe21;&#xe37;&#xe48;&#xe2d; Hover &#xe2b;&#xe23;&#xe37;&#xe2d;&#xe1b;&#xe01;&#xe15;&#xe34;&#xa;            0, height,&#xa;            isHovered ? new Color(255, 180, 0) : new Color(255, 102, 0)&#xa;        );&#xa;        g2.setPaint(gradientPaint);&#xa;        g2.fillRoundRect(0, 0, width - 10, height - 10, 30, 30);&#xa;&#xa;        // &#xe27;&#xe32;&#xe14;&#xe02;&#xe49;&#xe2d;&#xe04;&#xe27;&#xe32;&#xe21;&#xe02;&#xe2d;&#xe07;&#xe1b;&#xe38;&#xe48;&#xe21;&#xa;        super.paint(g, c);&#xa;        g2.dispose();&#xa;    }&#xa;&#xa;    @Override&#xa;    protected void installListeners(final AbstractButton b) {&#xa;        super.installListeners(b);&#xa;&#xa;        // &#xe40;&#xe1e;&#xe34;&#xe48;&#xe21; MouseListener &#xe40;&#xe1e;&#xe37;&#xe48;&#xe2d;&#xe08;&#xe31;&#xe14;&#xe01;&#xe32;&#xe23; Hover Effect&#xa;        b.addMouseListener(new java.awt.event.MouseAdapter() {&#xa;            @Override&#xa;            public void mouseEntered(java.awt.event.MouseEvent e) {&#xa;                isHovered = true;&#xa;                b.repaint();&#xa;            }&#xa;&#xa;            @Override&#xa;            public void mouseExited(java.awt.event.MouseEvent e) {&#xa;                isHovered = false;&#xa;                b.repaint();&#xa;            }&#xa;        });&#xa;    }&#xa;});&#xa;"/>
          </AuxValues>
        </Component>
        <Component class="javax.swing.JLabel" name="lbl_pic">
          <Properties>
            <Property name="icon" type="javax.swing.Icon" editor="org.netbeans.modules.form.editors2.IconEditor">
              <Image iconType="3" name="/1.png"/>
            </Property>
          </Properties>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>
